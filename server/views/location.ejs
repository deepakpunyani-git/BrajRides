<%- include('partials/header') %>
<section id="dashboard" class="dashboard section">
  <div class="container section-title" data-aos="fade-up">
    <h2>Locations</h2>
    <%- include('partials/submenu') %>
  </div>
  <div class="container" data-aos="fade-up" data-aos-delay="100">
    <div class="row gy-4">
      <div class="col-lg-12">
        <div class="page-content">
          <div class="row">
            <div class="col-sm-8">
              <h2>Location <b>Details</b></h2>
            </div>
            <div class="col-sm-4 text-end">
              <button type="button" class="btn btn-primary add-new" data-bs-toggle="modal" data-bs-target="#addLocationModal">
                Add New Location
              </button>
            </div>
          </div>
        </div>
        <div id="loader" class="text-center" style="display: none;">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <table id="location-table" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">#</th>
              <th scope="col">
                Name
              </th>
              <th scope="col">Address</th>
              <th scope="col">Phone</th>
              <th scope="col">Email</th>
              <th scope="col">Actions</th>
            </tr>
          </thead>
          <tbody id="location-table-body">
          </tbody>
        </table>
      </div>
    </div>
  </div>
</section>

<!-- Add Location Modal -->
<div class="modal fade" id="addLocationModal" tabindex="-1" aria-labelledby="addLocationModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addLocationModalLabel">Add New Location</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addLocationForm">
          <div class="mb-3">
            <label for="locationName" class="form-label">Name</label>
            <input type="text" class="form-control" id="locationName" required>
            <div class="invalid-feedback">Location name is required.</div>
          </div>
          <div class="mb-3">
            <label for="locationAddress" class="form-label">Address</label>
            <textarea class="form-control" id="locationAddress" rows="3" required></textarea>
            <div class="invalid-feedback">Address is required.</div>
          </div>
          <div class="mb-3">
            <label for="phone" class="form-label">Phone</label>
            <input type="text" class="form-control" id="phone" required>
            <div class="invalid-feedback">Phone number is required.</div>
          </div>
          <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" class="form-control" id="email" required>
            <div class="invalid-feedback">Email is required.</div>
          </div>
          <div class="mb-3">
            <label for="mapLink" class="form-label">Map Link</label>
            <input type="url" class="form-control" id="mapLink">
          </div>
          <button type="submit" class="btn btn-primary">Add Location</button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        Are you sure you want to delete this location?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
      </div>
    </div>
  </div>
</div>

<script>
    const token = localStorage.getItem('jwtToken');

  document.addEventListener('DOMContentLoaded', async () => {
    let currentSortOrder = 'asc';
    let currentSortBy = 'name';
    await TokenCheck();
    await fetchLocationData(currentSortOrder, currentSortBy);

    document.querySelectorAll('.sortable').forEach(header => {
      header.addEventListener('click', async () => {
        const key = header.getAttribute('data-key');
        currentSortOrder = currentSortBy === key && currentSortOrder === 'asc' ? 'desc' : 'asc';
        currentSortBy = key;

        await fetchLocationData(currentSortOrder, currentSortBy);
        updateSortIcons(currentSortOrder, currentSortBy);
      });
    });

    updateSortIcons(currentSortOrder, currentSortBy);
  });

  async function fetchLocationData(sortOrder = 'asc', sortBy = 'name') {
    const loader = document.getElementById('loader');
    loader.style.display = 'block';

    try {
      const response = await fetch(`/api/locations/list?sortOrder=${sortOrder}&sortBy=${sortBy}`, { method: 'GET', headers: {
        'Content-Type': 'application/json',
        'Authorization': token
      }});

      if (!response.ok) {
        throw new Error('Failed to fetch location data');
      }

      const locationList = await response.json();
      renderLocationTable(locationList.data);
    } catch (error) {
      console.log(error,'error')
      showToast('Failed to fetch location data.', 'danger');
    } finally {
      loader.style.display = 'none';
    }
  }

  function renderLocationTable(locationList) {
    const locationTableBody = document.getElementById('location-table-body');
    locationTableBody.innerHTML = '';

    locationList.forEach((location, index) => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <th scope="row">${index + 1}</th>
        <td>${location.name}</td>
        <td>${location.address}</td>
        <td>${location.phone}</td>
        <td>${location.email}</td>
        <td>
          <button class="btn btn-danger btn-sm delete-btn" data-id="${location._id}" data-bs-toggle="modal" data-bs-target="#deleteModal">Delete</button>
        </td>
      `;
      locationTableBody.appendChild(row);
    });

    document.querySelectorAll('.delete-btn').forEach(button => {
      button.addEventListener('click', (event) => {
        const locationId = event.target.getAttribute('data-id');
        const deleteButton = document.getElementById('confirmDeleteBtn');
        deleteButton.setAttribute('data-id', locationId);
      });
    });
  }

  document.getElementById('confirmDeleteBtn').addEventListener('click', async () => {
    const locationId = document.getElementById('confirmDeleteBtn').getAttribute('data-id');
    try {
      const response = await fetch(`/api/locations/delete/${locationId}`, { method: 'DELETE' , headers: {
        'Content-Type': 'application/json',
        'Authorization': token
      }});

      if (response.ok) {
        showToast('Location deleted successfully!', 'success');
        await fetchLocationData();
        $('#deleteModal').modal('hide');
      } else {
        throw new Error('Failed to delete location');
      }
    } catch (error) {
      showToast('Failed to delete location.', 'danger');
    }
  });

  document.getElementById('addLocationForm').addEventListener('submit', async (event) => {
  event.preventDefault(); // Prevent default form submission

  // Get form data
  const locationName = document.getElementById('locationName').value;
  const locationAddress = document.getElementById('locationAddress').value;
  const phone = document.getElementById('phone').value;
  const email = document.getElementById('email').value;
  const mapLink = document.getElementById('mapLink').value;

  // Validate the inputs
  if (!locationName || !locationAddress || !phone || !email) {
    showToast('All fields are required.', 'danger');
    return;
  }

  // Show loader while submitting
  const loader = document.getElementById('loader');
  loader.style.display = 'block';

  // Prepare the data for sending
  const newLocation = {
    name: locationName,
    address: locationAddress,
    phone: phone,
    email: email,
    mapLink: mapLink,
  };

  try {
    // Send the new location to the server
    const response = await fetch('/api/locations/add', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': token
      },
      body: JSON.stringify(newLocation),
    });

    if (!response.ok) {
      throw new Error('Failed to add new location');
    }

    const addedLocation = await response.json();
    showToast('Location added successfully!', 'success');
    await fetchLocationData(); // Refresh the table with new data
    $('#addLocationModal').modal('hide'); // Close the modal

    // Reset the form fields
    document.getElementById('addLocationForm').reset();
  } catch (error) {
    showToast('Failed to add location.', 'danger');
  } finally {
    loader.style.display = 'none';
  }
});



  function updateSortIcons(sortOrder, sortBy) {
    // Update sort icons based on the current sorting status
    document.querySelectorAll('.sortable').forEach(header => {
      const icon = header.querySelector('.sort-icon');
      if (header.getAttribute('data-key') === sortBy) {
        icon.textContent = sortOrder === 'asc' ? '↑' : '↓';
      } else {
        icon.textContent = '';
      }
    });
  }
</script>
<%- include('partials/footer') %>
