<%- include('partials/header') %>
<section id="dashboard" class="dashboard section">
  <div class="container section-title" data-aos="fade-up">
    <h2>Vehicles</h2>
    <%- include('partials/submenu') %>
  </div>
  
  <div class="container" data-aos="fade-up" data-aos-delay="100">
    <div class="row gy-4">
      <div class="col-lg-12">
        <div class="page-content">
          <div class="row">
            <div class="col-sm-8">
              <h2>Vehicle <b>Details</b></h2>
            </div>
            <div class="col-sm-4 text-end">
              <button type="button" class="btn btn-primary add-new" data-bs-toggle="modal" data-bs-target="#addVehicleModal">
                Add New Vehicle
              </button>
            </div>
          </div>
        </div>

        <div id="loader" class="text-center" style="display: none;">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>


<div class="card mb-3">
  <div class="card-body">
    <form id="vehicleFilterForm" class="row g-2">
      <div class="col-md-3">
        <input type="text" class="form-control" id="filterBrand" placeholder="Search by Brand">
      </div>
      <div class="col-md-3">
        <select class="form-select" id="filterLocation">
          <option value="">All Locations</option>
          <% locations.forEach(location => { %>
            <option value="<%= location._id %>"><%= location.name %></option>
          <% }) %>
        </select>
      </div>
      <div class="col-md-3">
        <select class="form-select" id="filterType">
          <option value="">All Types</option>
          <option value="scooty">Scooty</option>
          <option value="bike">Bike</option>
        </select>
      </div>
      <div class="col-md-3 d-grid">
        <button type="button" id="applyFilterBtn">Apply Filter</button>
      </div>
    </form>
  </div>
</div>
        <table id="vehicle-table" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">#</th>
              <th scope="col">Brand</th>
              <th scope="col">Model</th>
              <th scope="col">Location</th>
              <th scope="col">Price</th>
              <th scope="col">Actions</th>
            </tr>
          </thead>
          <tbody id="vehicle-table-body">
            <!-- Vehicle data will be populated here -->
          </tbody>
        </table>
         <!-- Pagination -->
  <nav id="paginationNav" class="d-flex justify-content-center mt-3">
    <ul class="pagination"></ul>
  </nav>
      </div>
    </div>
  </div>
</section>

<!-- Add Vehicle Modal -->
<div class="modal fade" id="addVehicleModal" tabindex="-1" aria-labelledby="addVehicleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addVehicleModalLabel">Add New Vehicle</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addVehicleForm" enctype="multipart/form-data">
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="vehicleBrand" class="form-label">Brand</label>
              <input type="text" class="form-control" id="vehicleBrand" name="brand" required>
            </div>
            <div class="col-md-6 mb-3">
              <label for="vehicleModel" class="form-label">Model</label>
              <input type="text" class="form-control" id="vehicleModel" name="model" required>
            </div>
            <div class="col-md-6 mb-3">
              <label for="vehicleLocation" class="form-label">Location</label>
              <select class="form-control" id="vehicleLocation" name="location" required>
                <option value="">Select Location</option>
                <% locations.forEach(location => { %>
                  <option value="<%= location._id %>"><%= location.name %></option>
                <% }) %>
              </select>
            </div>
            <div class="col-md-6 mb-3">
              <label for="vehiclePrice" class="form-label">Price</label>
              <input type="number" class="form-control" id="vehiclePrice" name="price" required>
            </div>
            <div class="col-md-6 mb-3">
              <label for="vehicleType" class="form-label">Type</label>
              <select class="form-control" id="vehicleType" name="type" required>
                <option value="scooty">Scooty</option>
                <option value="bike">Bike</option>
              </select>
            </div>
            <div class="col-md-6 mb-3">
              <label for="image" class="form-label">Image</label>
              <input type="file" class="form-control" id="image" name="image" accept="image/*">
            </div>
            <div class="col-12 mb-3 form-check">
              <input type="checkbox" class="form-check-input" id="vehicleIsElectric" name="vehicleIsElectric">
              <label class="form-check-label" for="vehicleIsElectric">Is Electric?</label>
            </div>
          </div>
          <button type="submit" class="btn btn-primary w-100">Add Vehicle</button>
        </form>
        
      </div>
    </div>
  </div>
</div>

<!-- Edit Vehicle Modal -->
<div class="modal fade" id="editVehicleModal" tabindex="-1" aria-labelledby="editVehicleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editVehicleModalLabel">Edit Vehicle</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="editVehicleForm" enctype="multipart/form-data">
          <input type="hidden" id="editVehicleId" name="id">
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editVehicleBrand" class="form-label">Brand</label>
              <input type="text" class="form-control" id="editVehicleBrand" name="brand" required>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editVehicleModel" class="form-label">Model</label>
              <input type="text" class="form-control" id="editVehicleModel" name="model" required>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editVehicleLocation" class="form-label">Location</label>
              <select class="form-control" id="editVehicleLocation" name="location" required>
                <option value="">Select Location</option>
                <% locations.forEach(location => { %>
                  <option value="<%= location._id %>"><%= location.name %></option>
                <% }) %>
              </select>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editVehiclePrice" class="form-label">Price</label>
              <input type="number" class="form-control" id="editVehiclePrice" name="price" required>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editVehicleType" class="form-label">Type</label>
              <select class="form-control" id="editVehicleType" name="type" required>
                <option value="scooty">Scooty</option>
                <option value="bike">Bike</option>
              </select>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editImage" class="form-label">Image</label>
              <input type="file" class="form-control" id="editImage" name="image" accept="image/*">
            </div>
            <div class="col-12 mb-3 form-check">
              <input type="checkbox" class="form-check-input" id="editVehicleIsElectric" name="isElectric">
              <label class="form-check-label" for="editVehicleIsElectric">Is Electric?</label>
            </div>
          </div>
          <button type="submit" class="btn btn-primary w-100">Save Changes</button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Delete Vehicle Modal -->
<div class="modal fade" id="deleteVehicleModal" tabindex="-1" aria-labelledby="deleteVehicleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteVehicleModalLabel">Confirm Delete</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        Are you sure you want to delete this vehicle?
        <input type="hidden" id="deleteVehicleId" />

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteVehicleBtn">Delete</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="viewVehicleModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">View Vehicle</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <p><strong>Brand:</strong> <span id="viewBrand"></span></p>
        <p><strong>Model:</strong> <span id="viewModel"></span></p>
        <p><strong>Location:</strong> <span id="viewLocation"></span></p>
        <p><strong>Price:</strong> â‚¹<span id="viewPrice"></span></p>
        <p><strong>Type:</strong> <span id="viewType"></span></p>
        <p><strong>Electric:</strong> <span id="viewIsElectric"></span></p>
        <img id="viewImage" src="" class="img-fluid mt-2 rounded" style="max-height: 200px;" />
      </div>
    </div>
  </div>
</div>
<script>
  const token = localStorage.getItem('jwtToken');

  document.addEventListener('DOMContentLoaded', async () => {
    await TokenCheck();
    await fetchVehiclesData(1);
  });

  document.getElementById('applyFilterBtn').addEventListener('click', async function (event) {
    event.preventDefault();
    await fetchVehiclesData(1);
  });

  document.getElementById('addVehicleForm').addEventListener('submit', async (event) => {
    event.preventDefault();
    const formData = new FormData(event.target);

    try {
      const response = await fetch('/api/vehicles/add', {
        method: 'POST',
        headers: { 'Authorization': token },
        body: formData,
      });

      if (response.ok) {
        showToast('Vehicle added successfully!', 'success');
        await fetchVehiclesData(currentPage);
        event.target.reset();
        $('#addVehicleModal').modal('hide');
      } else {
        showToast('Failed to add vehicle.', 'danger');
      }
    } catch (error) {
      console.error('Error:', error);
      showToast('Error adding vehicle. Try again.', 'danger');
    }
  });

  let currentPage = 1;

  async function fetchVehiclesData(page = 1) {
    const loader = document.getElementById('loader');
    loader.style.display = 'block';

    const brand = document.getElementById('filterBrand').value.trim();
    const location = document.getElementById('filterLocation').value;
    const type = document.getElementById('filterType').value;

    const params = new URLSearchParams({ page, limit: 20 });
    if (brand) params.append('brand', brand);
    if (location) params.append('location', location);
    if (type) params.append('type', type);

    try {
      const response = await fetch(`/api/vehicles/list?${params.toString()}`, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': token
        }
      });

      const { vehicles, totalPages } = await response.json();
      renderVehicleTable(vehicles);
      renderPagination(totalPages, page);
      currentPage = page;
    } catch (error) {
      console.error('Error fetching vehicles:', error);
    }

    loader.style.display = 'none';
  }

  function renderPagination(totalPages, current) {
    const pagination = document.querySelector('#paginationNav .pagination');
    pagination.innerHTML = '';

    for (let i = 1; i <= totalPages; i++) {
      const li = document.createElement('li');
      li.classList.add('page-item');
      if (i === current) li.classList.add('active');

      const btn = document.createElement('button');
      btn.classList.add('page-link');
      btn.textContent = i;
      btn.addEventListener('click', () => fetchVehiclesData(i));

      li.appendChild(btn);
      pagination.appendChild(li);
    }
  }

  function renderVehicleTable(vehicles) {
    const tableBody = document.getElementById('vehicle-table-body');
    tableBody.innerHTML = '';

    vehicles.forEach((vehicle, index) => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${index + 1}</td>
        <td>${vehicle.brand}</td>
        <td>${vehicle.model}</td>
        <td>${vehicle.location ? vehicle.location.name : 'N/A'}</td>
        <td>${vehicle.price}</td>
        <td>
          <button class="btn btn-info btn-sm view-btn" data-vehicle="${vehicle._id}" data-bs-toggle="modal" data-bs-target="#viewVehicleModal">View</button>
          <button class="btn btn-primary btn-sm edit-btn" data-vehicle="${vehicle._id}" data-bs-toggle="modal" data-bs-target="#editVehicleModal">Edit</button>
          <button class="btn btn-danger btn-sm delete-btn" data-vehicle="${vehicle._id}" data-bs-toggle="modal" data-bs-target="#deleteVehicleModal">Delete</button>
        </td>
      `;
      tableBody.appendChild(row);
    });
  }

  document.addEventListener('click', async (e) => {
    if (e.target.classList.contains('view-btn')) {
      const vehicleId = e.target.getAttribute('data-vehicle');
      try {
        const res = await fetch(`/api/vehicles/${vehicleId}`, {
          headers: { 'Authorization': token }
        });
        const vehicle = await res.json();

        document.getElementById('viewBrand').textContent = vehicle.brand;
        document.getElementById('viewModel').textContent = vehicle.model;
        document.getElementById('viewLocation').textContent = vehicle.location?.name || '';
        document.getElementById('viewPrice').textContent = vehicle.price;
        document.getElementById('viewType').textContent = vehicle.type;
        document.getElementById('viewIsElectric').textContent = vehicle.isElectric ? 'Yes' : 'No';
        document.getElementById('viewImage').src = `/uploads/${vehicle.image || 'default.png'}`;
      } catch (err) {
        console.error('Failed to load vehicle data', err);
      }
    }

    if (e.target.classList.contains('edit-btn')) {
      const vehicleId = e.target.getAttribute('data-vehicle');
      try {
        const res = await fetch(`/api/vehicles/${vehicleId}`, {
          headers: { 'Authorization': token }
        });
        const vehicle = await res.json();

        document.getElementById('editVehicleId').value = vehicle._id;
        document.getElementById('editVehicleBrand').value = vehicle.brand;
        document.getElementById('editVehicleModel').value = vehicle.model;
        document.getElementById('editVehicleLocation').value = vehicle.location?._id || '';
        document.getElementById('editVehiclePrice').value = vehicle.price;
        document.getElementById('editVehicleType').value = vehicle.type;
        document.getElementById('editVehicleIsElectric').checked = vehicle.isElectric;
      } catch (err) {
        console.error('Failed to load vehicle data for edit', err);
      }
    }

    if (e.target.classList.contains('delete-btn')) {
      const vehicleId = e.target.getAttribute('data-vehicle');
      document.getElementById('deleteVehicleId').value = vehicleId;
    }
  });

  document.getElementById('editVehicleForm').addEventListener('submit', async (e) => {
    e.preventDefault();

    const vehicleId = document.getElementById('editVehicleId').value;
    const formData = new FormData(e.target);

    try {
      const res = await fetch(`/api/vehicles/update/${vehicleId}`, {
        method: 'PUT',
        headers: { 'Authorization': token },
        body: formData,
      });

      if (res.ok) {
        showToast('Vehicle updated successfully!', 'success');
        $('#editVehicleModal').modal('hide');
        await fetchVehiclesData(currentPage);
      } else {
        showToast('Failed to update vehicle.', 'danger');
      }
    } catch (err) {
      console.error('Edit failed', err);
      showToast('Error updating vehicle.', 'danger');
    }
  });

  document.addEventListener('click', (e) => {
    if (e.target.classList.contains('delete-btn')) {
      const vehicleId = e.target.getAttribute('data-vehicle');
      document.getElementById('confirmDeleteVehicleBtn').setAttribute('data-id', vehicleId);
    }
  });

  document.getElementById('confirmDeleteVehicleBtn').addEventListener('click', async (e) => {
    e.preventDefault();


      const vehicleId = document.getElementById('deleteVehicleId').value;

      try {
        const res = await fetch(`/api/vehicles/delete/${vehicleId}`, {
          method: 'DELETE',
          headers: { 'Authorization': token }
        });

        if (res.ok) {
          showToast('Vehicle deleted successfully!', 'success');
          $('#deleteVehicleModal').modal('hide');
          await fetchVehiclesData(currentPage);
        } else {
          showToast('Failed to delete vehicle.', 'danger');
        }
      } catch (err) {
        console.error('Delete failed', err);
        showToast('Error deleting vehicle.', 'danger');
      }
    });


</script>


<%- include('partials/footer') %>
