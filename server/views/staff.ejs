<%- include('partials/header') %>
<section id="dashboard" class="dashboard section">
  <div class="container section-title" data-aos="fade-up">
    <h2>Staff</h2>
    <%- include('partials/submenu') %>
  </div>
  <div class="container" data-aos="fade-up" data-aos-delay="100">
    <div class="row gy-4">
      <div class="col-lg-12">
        <div class="page-content">
          <div class="row">
            <div class="col-sm-8">
              <h2>Staff <b>Details</b></h2>
            </div>
            <div class="col-sm-4 text-end">
              <button type="button" class="btn btn-primary add-new" data-bs-toggle="modal" data-bs-target="#addStaffModal">
                Add New Staff
              </button>
            </div>
          </div>
        </div>
        <div id="loader" class="text-center" style="display: none;">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <table id="staff-table" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">#</th>
              <th scope="col">
                <span class="sortable" data-key="name">Name <span class="sort-icon"></span></span>
              </th>
              <th scope="col">Username</th>
              <th scope="col">Location</th>
              <th scope="col">Block Status</th>
              <th scope="col">Date Created</th>
              <th scope="col">Date Updated</th>
              <th scope="col">Actions</th>
            </tr>
          </thead>
          <tbody id="staff-table-body">
          </tbody>
        </table>
        
      </div>
    </div>
  </div>
</section>

<!-- Add Staff Modal -->
<div class="modal fade" id="addStaffModal" tabindex="-1" aria-labelledby="addStaffModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addStaffModalLabel">Add New Staff</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addStaffForm">
          <div class="mb-3">
            <label for="staffName" class="form-label">Name</label>
            <input type="text" class="form-control" id="staffName">
            <div class="invalid-feedback">Name is required.</div>
          </div>
          <div class="mb-3">
            <label for="StaffLocation">Location</label>
            <select class="form-control" id="StaffLocation" name="StaffLocation">
              <option value="">Select Location</option>
              <% locations.forEach(location => { %>
                <option value="<%= location._id %>"><%= location.name %></option>
              <% }) %>
            </select>
            <div class="invalid-feedback">Please select a location.</div>
          </div>
          <div class="mb-3">
            <label for="staffUsername" class="form-label">Username</label>
            <input type="text" class="form-control" id="staffUsername">
            <div class="invalid-feedback">Username is required.</div>
          </div>
          <div class="mb-3">
            <label for="staffPassword" class="form-label">Password</label>
            <input type="password" class="form-control" id="staffPassword">
            <div class="invalid-feedback">Password must be at least 8 characters long.</div>
          </div>
          <button type="submit" class="btn btn-primary">Add Staff</button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Block/Unblock Confirmation Modal -->
<div class="modal fade" id="blockModal" tabindex="-1" aria-labelledby="blockModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="blockModalLabel">Confirm Action</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        Are you sure you want to <span id="blockAction"></span> this user?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="confirmBlockBtn">Yes</button>
      </div>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        Are you sure you want to delete this user?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
      </div>
    </div>
  </div>
</div>
<!-- Change Password Modal -->
<div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="changePasswordModalLabel">Change Password</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="changePasswordForm">
          <div class="mb-3">
            <label for="newPassword" class="form-label">New Password</label>
            <input type="password" class="form-control" id="newPassword" required>
          </div>
          <input type="hidden" id="staffId">
          <button type="submit" class="btn btn-primary">Update Password</button>
        </form>
      </div>
    </div>
  </div>
</div>


<div class="modal fade" id="changeLocationModal" tabindex="-1" aria-labelledby="changeLocationModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="changeLocationModalLabel">Change Location</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="changeLocationForm">
          <div class="mb-3">
            <label for="newLocation" class="form-label">Select New Location</label>
            <select class="form-select" id="newLocation" required>
              <option value="">Select Location</option>
              <% locations.forEach(location => { %>
                <option value="<%= location._id %>"><%= location.name %></option>
              <% }) %>
            </select>
          </div>
          <button type="submit" class="btn btn-primary">Update Location</button>
        </form>
      </div>
    </div>
  </div>
</div>

<script>

document.addEventListener('click', function(e) {
  if (e.target && e.target.classList.contains('change-location-btn')) {
    const staffId = e.target.getAttribute('data-id');
    const currentLocation = e.target.getAttribute('data-location');
    
    document.getElementById('newLocation').value = currentLocation;

    new bootstrap.Modal(document.getElementById('changeLocationModal')).show();

    document.getElementById('changeLocationForm').onsubmit = function(event) {
      event.preventDefault();
      const newLocation = document.getElementById('newLocation').value;
      
      updateLocation(staffId, newLocation);
      
      bootstrap.Modal.getInstance(document.getElementById('changeLocationModal')).hide();
    };
  }
});
function updateLocation(staffId) {
  const newLocation = document.getElementById('newLocation').value;
  const token = localStorage.getItem('jwtToken');

  if (!newLocation) {
    showToast('Please select a location.', 'danger');
    return; 
  }

  fetch(`/api/staff/${staffId}/updateLocation`, {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': token
    },
    body: JSON.stringify({ location: newLocation }),
  })
  .then(response => response.json())
  .then(data => {
    if (data.message) {
      showToast('Location updated successfully!', 'success');
      location.reload();  
    } else {
      showToast('Failed to update location.', 'danger');
    }
  })
  .catch(error => {
    console.error('Error:', error);
    showToast('Error updating location.', 'danger');
  });
}


document.addEventListener('DOMContentLoaded', async () => {
  let currentSortOrder = 'asc';
  let currentSortBy = 'name';

  await TokenCheck();
  await fetchStaffData(currentSortOrder, currentSortBy);

  document.querySelectorAll('.sortable').forEach(header => {
    header.addEventListener('click', async () => {
      const key = header.getAttribute('data-key');
      currentSortOrder = currentSortBy === key && currentSortOrder === 'asc' ? 'desc' : 'asc';
      currentSortBy = key;

      await fetchStaffData(currentSortOrder, currentSortBy);
      updateSortIcons(currentSortOrder, currentSortBy);
    });
  });

  updateSortIcons(currentSortOrder, currentSortBy);

  document.querySelectorAll('.change-password-btn').forEach(button => {
      button.addEventListener('click', () => {
        const userId = button.getAttribute('data-id');
        showChangePasswordModal(userId);
      });
    });
});


document.addEventListener('DOMContentLoaded', () => {
    const changePasswordForm = document.getElementById('changePasswordForm');
    
    changePasswordForm.addEventListener('submit', async (e) => {
      e.preventDefault();

      const newPassword = document.getElementById('newPassword').value;
      const staffId = document.getElementById('staffId').value;
      const token = localStorage.getItem('jwtToken');
      
      try {
        const response = await fetch(`/api/staff/password/${staffId}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': token
          },
          body: JSON.stringify({ newPassword })
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Failed to update password');
        }

        showToast('Password updated successfully!', 'success');
        hideModal('changePasswordModal');
      } catch (error) {
        //console.error('Change password error:', error.message);
        showToast(error.message, 'danger');
      }
    });
  });

  function showChangePasswordModal(userId) {
    const staffIdInput = document.getElementById('staffId');
    staffIdInput.value = userId;

    const changePasswordModal = new bootstrap.Modal(document.getElementById('changePasswordModal'));
    changePasswordModal.show();
  }


async function fetchStaffData(sortOrder = 'asc', sortBy = 'name') {
  const token = localStorage.getItem('jwtToken');
  if (token) {
    const staffTableBody = document.getElementById('staff-table-body');
    const loader = document.getElementById('loader');

    loader.style.display = 'block'; 

    const waitFor = ms => new Promise(resolve => setTimeout(resolve, ms));
    await waitFor(500); 

    try {
      const response = await fetch(`/api/staff?sortOrder=${sortOrder}&sortBy=${sortBy}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': token
        }
      });

      if (!response.ok) {
        throw new Error('Failed to fetch staff data');
      }

      const staffList = await response.json();
      renderStaffTable(staffList);
    } catch (error) {
      showToast('Failed to fetch staff data. Please refresh the page.', 'danger');
    } finally {
      loader.style.display = 'none'; 
    }
  }
}

function renderStaffTable(staffList) {
  const staffTableBody = document.getElementById('staff-table-body');
  staffTableBody.innerHTML = '';

  staffList.forEach((staff, index) => {
    const row = document.createElement('tr');
    row.innerHTML = `
      <th scope="row">${index + 1}</th>
      <td>${staff.name}</td>
      <td>${staff.username}</td>
      <td>${staff?.location?.name || '-'}</td>
      <td>${staff.block_user ? 'Blocked' : 'Active'}</td>
      <td>${new Date(staff.dateCreated).toLocaleDateString()}</td>
      <td>${staff.dateUpdated ? new Date(staff.dateUpdated).toLocaleDateString() : '-'}</td>
      <td>
         <button class="btn btn-info btn-sm change-location-btn" data-id="${staff._id}" data-location="${staff?.location?._id || ''}">
        Change Location
      </button>
        <button class="btn btn-warning btn-sm change-password-btn" data-id="${staff._id}">Change Password</button>

        <button class="btn btn-${staff.block_user ? 'success' : 'danger'} btn-sm block-btn" data-id="${staff._id}" data-block-status="${staff.block_user}">
          ${staff.block_user ? 'Unblock' : 'Block'}
        </button>
        <button class="btn btn-danger btn-sm delete-btn" data-id="${staff._id}">Delete</button>
      </td>
    `;
    staffTableBody.appendChild(row);

    const blockBtn = row.querySelector('.block-btn');
    blockBtn.addEventListener('click', () => {
      const userId = blockBtn.getAttribute('data-id');
      const currentStatus = blockBtn.getAttribute('data-block-status') === 'true';
      showBlockModal(userId, currentStatus);
    });

    const deleteBtn = row.querySelector('.delete-btn');
    deleteBtn.addEventListener('click', () => {
      const userId = deleteBtn.getAttribute('data-id');
      showDeleteModal(userId);
    });
  });
}

function updateSortIcons(currentSortOrder, currentSortBy) {
  document.querySelectorAll('.sortable').forEach(header => {
    const key = header.getAttribute('data-key');
    const icon = header.querySelector('.sort-icon');

    if (key === currentSortBy) {
      if (currentSortOrder === 'asc') {
        icon.innerHTML = '&#9650;'; // Up arrow
      } else {
        icon.innerHTML = '&#9660;'; // Down arrow
      }
    } else {
      icon.innerHTML = ''; // Clear icon
    }
  });
}



function showBlockModal(userId, currentStatus) {
  const blockAction = document.getElementById('blockAction');
  blockAction.textContent = currentStatus ? 'unblock' : 'block';
  const confirmBlockBtn = document.getElementById('confirmBlockBtn');

  confirmBlockBtn.onclick = async () => {
    await blockUnblockUser(userId, !currentStatus);
  };

  const blockModal = new bootstrap.Modal(document.getElementById('blockModal'));
  blockModal.show();
}

function showDeleteModal(userId) {
  const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');

  confirmDeleteBtn.onclick = async () => {
    await deleteUser(userId);
  };

  const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
  deleteModal.show();
}

async function blockUnblockUser(userId, newStatus) {
  const token = localStorage.getItem('jwtToken');
  try {
    const response = await fetch(`/api/user/block-status/${userId}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': token
      },
      body: JSON.stringify({ block_user: newStatus })
    });

    
    if (!response.ok) {
      const errorData = await response.json(); // Parse the JSON error response
      throw new Error(errorData.message || 'Failed to update block status');
    }

    await fetchStaffData();
    hideModal('blockModal')
    showToast('User block status updated successfully!', 'success');
  } catch (error) {
    showToast(error.message, 'danger');
  }
}

async function deleteUser(userId) {
  const token = localStorage.getItem('jwtToken');
  try {
    const response = await fetch(`/api/staff/${userId}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': token
      }
    });

    if (!response.ok) {
      const errorData = await response.json(); 
      throw new Error(errorData.message || 'Failed to delete user');
    }

    await fetchStaffData();
    hideModal('deleteModal')
    showToast('User deleted successfully!', 'success');
  } catch (error) {
    showToast(error.message, 'danger');
  }
}

document.getElementById('addStaffForm').addEventListener('submit', async (event) => {
  event.preventDefault();

  const nameInput = document.getElementById('staffName');
  const usernameInput = document.getElementById('staffUsername');
  const passwordInput = document.getElementById('staffPassword');
  const locationInput = document.getElementById('StaffLocation');

  let isValid = true;

  if (nameInput.value.trim() === '') {
    nameInput.classList.add('is-invalid');
    isValid = false;
  } else {
    nameInput.classList.remove('is-invalid');
  }


  if (locationInput.value.trim() === '') {
    locationInput.classList.add('is-invalid');
    isValid = false;
  } else {
    locationInput.classList.remove('is-invalid');
  }


  if (usernameInput.value.trim() === '') {
    usernameInput.classList.add('is-invalid');
    isValid = false;
  } else {
    usernameInput.classList.remove('is-invalid');
  }

  if (passwordInput.value.length < 8) {
    passwordInput.classList.add('is-invalid');
    isValid = false;
  } else {
    passwordInput.classList.remove('is-invalid');
  }

  if (isValid) {
    const newStaff = {
      name: nameInput.value,
      username: usernameInput.value,
      password: passwordInput.value,
      location: locationInput.value

    };

    await addStaff(newStaff);
  }
});

async function addStaff(staff) {
  const token = localStorage.getItem('jwtToken');
  try {
    const response = await fetch('/api/staff', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': token
      },
      body: JSON.stringify(staff)
    });

    if (!response.ok) {
      const errorData = await response.json(); // Parse the JSON error response
      throw new Error(errorData.message || 'Failed to add new staff');
    }

    await fetchStaffData();
    hideModal("addStaffModal")
    $("#addStaffForm input").val('');

    showToast('New staff added successfully!', 'success');
  } catch (error) {
    showToast(error.message, 'danger');
  }
}


</script>
<%- include('partials/footer') %>
